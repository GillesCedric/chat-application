import { app, BrowserWindow, ipcMain } from 'electron';
import crypto from 'crypto';
import SecureStore from './modules/store/Store';
import isOnline from 'is-online';
import si from 'systeminformation'
import path from 'path';

// Additional imports for checking online status 
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const secureStore = new SecureStore("chat-application-desktop-encryption-generation-key");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
/* Acces token persitency here */
secureStore.set("chat-application-access_token", "null")
secureStore.set("chat-application-refresh_token", "null")

// IPC listener
ipcMain.on('electron-store-get', (event, val) => {
  event.returnValue = secureStore.get(val);
});

ipcMain.on('electron-store-set', (event, key, val) => {
  secureStore.set(key, val);
});

const getSystemFingerprint = async () => {
  try {

    const [systemInfo, cpuInfo, osInfo, biosInfo, baseboardInfo, chassisInfo] = await Promise.all([
      si.getStaticData(),
      si.cpu(),
      si.osInfo(),
      si.bios(),
      si.baseboard(),
      si.chassis(),
    ]);

    const fingerprint = {
      systemManufacturer: systemInfo.system.manufacturer,
      systemModel: systemInfo.system.model,
      systemSerial: systemInfo.system.serial,
      systemUUID: systemInfo.system.uuid,
      cpuManufacturer: cpuInfo.manufacturer,
      cpuBrand: cpuInfo.brand,
      cpuCores: cpuInfo.cores,
      cpuSpeed: cpuInfo.speed,
      cpuVendor: cpuInfo.vendor,
      cpuFamily: cpuInfo.family,
      cpuModel: cpuInfo.model,
      osPlatform: osInfo.platform,
      osRelease: osInfo.release,
      osDistro: osInfo.distro,
      osArch: osInfo.arch,
      osHostname: osInfo.hostname,
      osSerial: osInfo.serial,
      biosVendor: biosInfo.vendor,
      baseboardManufacturer: baseboardInfo.manufacturer,
      baseboardModel: baseboardInfo.model,
      baseboardSerial: baseboardInfo.serial,
      chassisManufacturer: chassisInfo.manufacturer,
      chassisModel: chassisInfo.model,
      chassisSerial: chassisInfo.serial
      // Ajoute d'autres informations du système selon les besoins
    };

    return crypto.createHash('sha256').update(JSON.stringify(fingerprint)).digest('hex')
  } catch (error) {
    console.error('Erreur lors de la récupération de l\'empreinte du système :', error)
    return null
  }
}

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true, // Important for security
      //nodeIntegration: true,
    },
    icon: "./src/assets/chat-application.png",

  });



  //mainWindow.setMenu(null)

  mainWindow.loadURL(`file://${path.join(process.cwd(), 'src', 'loading.html')}`);

  const fingerprint = await getSystemFingerprint()

  if (fingerprint)
    mainWindow.webContents.setUserAgent(`${mainWindow.webContents.userAgent} Fingerprint/${fingerprint}`)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // ipcMain.on('get', async (event, key: string) => {
  //   console.log("get")
  //   return secureStore.get(key)
  // })

  // ipcMain.on('set', async (event, key: string, value: any) => {
  //   console.log("set")
  //   return secureStore.set(key, value)
  // })

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
